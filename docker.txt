What is Docker?
A platform for building, running and shipping application.
Why an application might not run as expected in another machine?
	One or more files missing, Software version mismatch, different configuration settings
Docker is used to package applications with required dependancies.
Container - An isolated environment for running and application. 
Virtual Machine - An abstraction of hardware. We use Hypervisors like virtual box or VMware on top of hardware to support different operating systems.
Problems with virtual machines - each VM needs a full-blown OS that needs to be licensed, patched and monitored,
Slow to start because entire OS need to be loaded. Resource intensive (takes CPU, memory and disk space).
Containers are lightweight, uses the OS of the host. Start Quickly. Need less hardware resources.
Docker uses a client-server architecture. Client calls the server (Docker engine) using a Restful API.
Docker Engine runs on the background, takes care of building and running docker containers.
install guide - https://docs.docker.com/get-docker/
cmd -> docker version -- will give you the installed docker version
add a Dockerfile to app - has information on how to package app into an image
image has - a cut-down OS, a runtime environment (eg: Node), application files, third-party libraries, environment variables
Docker starts a container using an image.
We can push image to a docker registry like docker hub. It is a storage that anyone can use.
Then that image can be pulled by any machine running docker.

FROM node:alpine -- pullin the node image built for the linux version alpine.
COPY . /app -- copy files from current directory to the app directory created inside the image file systems
WORKDIR /app
CMD node app.js

Go to cmd and run -> docker build -t docker-init .
We are giving a tag for the image to be created named "docker-init". Dot(.) after that tells docker, where the Dockerfile for the application is located.
. means current directory.
When that command is run, docker will create the image, but we can't see it inside the project directory. It is a complex process.
To see all the images on this computer we can type-> docker images OR docker image ls
docker run docker-init --will run the image we created, it doesn't matter from which directory, because this image has all the files needed to run this app.

https://labs.play-with-docker.com/
login with google account
Add new instance -> will create an instance with linux (virtual machine)
type -> node --node command not found
type -> docker pull Vinura96/docker-init (We need to upload the image to docker hub before running this)
type -> docker run Vinura96/docker-init

docker is built on basic linux concepts.
Linux Distributions? Linux is open source software. So different companies have creted their own linux versions, which are called Linux Distributions.
Famous Linux distros : Ubunty, Debian, Alpine, Fedora, CentOS

Running Linux.
Go to hub.docker.com -> search for Ubuntu
instead of running 'docker pull ubuntu', run 'docker run ubuntu' which will pull the image before running, since we don't have the image locally.
docker ps -> list of running processers or running containers
docker ps -a -> we can see the stopped containers as well.
docker run -it ubuntu -> 'it' means interactive mode. This command will open the shell. Shell is a program, which passes our commands to OS for execution.
shell shows like 'root@2f123e4567e8:/#' -> 'root' means the currently logged in user. '2f123e4567e8' is the machine name (unique container id). '/' represents the root directory of the file system.
'#' means user have the all the permissions. by default user is logged in as root user. If it was another user, it shouldshow '$' sign instead of '#'.
inside the shell type -> echo hello -> which will print hello
inside the shell type -> whoami -> root(shows the current user)
inside the shell type -> echo $0 -> /bin/bash (location of the shell program)
Linux uses '/' forward slash to seperate directories and files. Windows use black slash.
Linux is a case sensitive OS. If you type 'Echo $0' it's not gonna work.
inside the shell type -> history -> will show all the commands you executed lately
inside the shell type -> !2 -> will run the second command shown in the history.
inside the shell type -> exit -> exit the session (Or press Ctrl+D)
Detach without stopping: Press Ctrl+P and then Ctrl+Q.
docker attach <container_id_or_name> -> Attach to the Running Container. This will reattach your terminal to the container's main process.
If you want to open a new shell session in the running container, docker exec is a better option because it allows you to run a new command in the container without interfering with the existing processes.
docker exec -it <container_id_or_name> /bin/bash
docker stop <container_id_or_name> -> stop a running image
docker rm <container_id_or_name> -> Remove the Stopped Container: Remove the container to free up system resources.
docker rmi <image_id_or_name> -> remove the Docker Image: Use the image ID or name to remove the image.

package managers - eg: npm, yarn, pip, Nuget
In ubuntu, apt (advance package tool) is used as a package manager.
inside the shell type -> apt -> will show the bunch of sub commands apt have.
nano is a basic text editor for linux.
inside the shell type -> apt install nano -> which gives an error since it's not inside the package library of linux.
linux has a package database of hundreds of packages. But not all of this packages are installed. 'apt list' command will show them.
To update the package database -> apt update
Now you will be able to install nano since its available in the database.
Before installing a package, always run 'apt update' to update your package database.
inside the shell type -> nano -> which will open the text editor.
inside the shell type -> apt remove nano -> which will unisntall nano

linux file system. In linux everything is a file.
/ = root directory.
under root directory, we have following directories.
bin - binaries or programs.
boot - includes all the files related to booting.
dev - short word for devices. Files that needed to act as devices are stored in this directory.
etc - editable text configurations. we have configuration files here.
home - home directories for users are stored
root - home directory of the root user. only the root user can access this directory.
lib - keeping library files, like software library dependancies.
var - variables. Files which are updated frequently. ex: log files, application data...
proc - files that represent running processes.

Navigating the file system.
pwd - Print working directory. We can see where we are in the file system.
ls - list the files inside the directory.
ls -1 -> will list the files, one item per line.
ls -l -> list with more details (permissions of this file/directory, owner, size, date)
cd <path> -> to change the directory. path can be relative or absolute. An absolute path always start from the root directory('/')
cd .. -> go up one level in directories.
ls <path> - to see what's inside a directory, without going there. path can be relative or absolute.
cd ~ -> go to the home directory of user.